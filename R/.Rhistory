nrow(parms)
pmx <- matrix(rep(parms, times = length(x)), nrow = length(x),
byrow = TRUE, dimnames = list(NULL, colnames(parms)))
pmx
deno <- numeric(nrow(parms))
is.null(trad)
ip <- (1:nrow(pmx))
length(ip)
if (length(ip) > 0){
deno[ip] <- plnorm(trad,
meanlog = pmx[ip, "meanlog"], sdlog = pmx[ip, "sdlog"])
y[ip] <- dlnorm(xx[ip],
meanlog = pmx[ip, "meanlog"], sdlog = pmx[ip, "sdlog"])/deno[ip]
}
names(pmx)
dim(pmx)
colnames(pmx)
erf(-Inf)
erf
log(0)
erfi(-Inf)
erf(-Inf)
pracma::erfi(-Inf)
pracma::erfi(Inf)
pracma::erfi(-99999999)
pracma::erfi(99999999)
rmat(1, "lognormal")
rmat(r, "lognormal")
rmat(Inf, "lognormal")
rmat(100, "lognormal")
parms
parms <- parms[, c("(Intercept)", "log(r)", "I(log(r)^2)")
]
parms
if (nrow(parms) == 1){
pmx <- matrix(rep(parms, times = length(x)), nrow = length(x),
byrow = TRUE, dimnames = list(NULL, colnames(parms)))
} else {
pmx <- parms
}
nrow(parms)
source(.paths[5], echo=TRUE, max.deparse.length=150)
parms
is.vector(parms)
is.matrix(parms)
parms <- parms[, c("(Intercept)", "log(r)", "I(log(r)^2)"), drop = FALSE]
parms
parms<-as.matrix(parms, ncol = 3)
parms
parms<-t(parms)
parms
cof<-parms
deno <- numeric(nrow(cof))
for (i in length(deno)){
deno[i] <- integrate(
f = function(r) exp(rmat(r, distr) %*% x + off(r, distr)),
lower = 0, upper = trad)$val
}
distr
model$distr
distr<-model$distr
cof <- cof[, c("(Intercept)", "log(r)", "I(log(r)^2)"), drop = FALSE]
cof
deno <- numeric(nrow(cof))
for (i in length(deno)){
deno[i] <- integrate(
f = function(r) exp(rmat(r, distr) %*% x + off(r, distr)),
lower = 0, upper = trad)$val
}
for (i in length(deno)){
deno[i] <- integrate(
f = function(r) exp(rmat(r, distr) %*% cof + off(r, distr)),
lower = 0, upper = trad)$val
}
i
source(.paths[5], echo=TRUE, max.deparse.length=150)
deno
y <- exp(rmat(xx, distr) %*% t(cof) + off(xx, distr))/deno
y
plot(y)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
plot(ddw, type = "PDF", extent = "win")
plot(ddw, type = "CDF", extent = "full")
source(.paths[5], echo=TRUE, max.deparse.length=150)
plot(ddw, type = "CDF", extent = "full")
set = "all";
type = "CDF";  extent = "full";
trad = NULL; xmax = NULL; resolution = 250; mod_highlight = NULL
source(.paths[5], echo=TRUE, max.deparse.length=150)
dd
set
x <- ddw
if (set == "all"){
set <- mod_name
if (extent == "all")
set <- set[sapply(x, function(tmp) !any(is.na(tmp$parm)))]
}
set
?identical
source(.paths[5], echo=TRUE, max.deparse.length=150)
x <- ddw
set = "all";
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
if (identical(set, "all")){
set <- mod_name
if (extent == "all")
set <- set[sapply(x, function(tmp) !any(is.na(tmp$parm)))]
}
if (!any(set %in% mod_name)) stop("plot.ddArray: some model(s) undefined")
set
set = "all";
source(.paths[5], echo=TRUE, max.deparse.length=150)
set
aic(dd[set])
aic(x[set])
x
x[set]
dd <- x[set]
source(.paths[5], echo=TRUE, max.deparse.length=150)
aic_proper <- aic(dd)
aic_prope
aic_proper
if (extent == "win") {
aic_proper <- aic_proper[order(aic_proper$AICw),]
dAIC <- aic_proper$AICw - min(aic_proper$AICw)
} else {
dAIC <- aic_proper$deltaAICc
}
names(dAIC) <- aic_proper$model
mod_best <- aic_proper$model[1]
if (is.null(mod_highlight)) mod_highlight <- mod_best
if (is.null(xmax)) xmax <- max(dd[[1]]$dmod$data[, "r"])
xseq <- seq(0, xmax, length = resolution)
ncol <- ifelse(nrow(aic_proper) >= 6, 2, 1)
sz <- ifelse(round(nrow(aic_proper)/ncol) <= 3, 0.13,
ifelse(round(nrow(aic_proper)/ncol) <= 5, 0.17, 0.22))
do.call(par, par_default)
par(fig = c(0, 1, 0, sz), mar = c(0, 1, 0.5, 0), family = "mono")
plot(0, type = "n", axes = F, xlab = "", ylab = "")
leglab <- character(nrow(aic_proper))
lwd <- numeric(nrow(aic_proper)) + 1
lwd[1] <- 2
for (i in 1:nrow(aic_proper))
leglab[i] <- sprintf("%18-s%6.2f", aic_proper$model[i], dAIC[i])
mtext(side = 3, line = 0, adj = 0, sprintf("%19-s%s", "Distribution", "\u0394AICc"))
lty <- 1 + (aic_proper$model %in% notNatural)
names(lty) <- aic_proper$model
legend(x = "topleft", legend = leglab, cex = 0.8, lwd = lwd, bty = "n",
ncol = ncol, lty = lty, col = mod_color[aic_proper$model])
x[set]
par(fig = c(0, 1, sz, 1), mar = c(4, 4, 2.5, 0.5), family = "sans",
new = TRUE) # for main graph
plot(0, type = "n", xlim = c(0, xmax), ylim = 0:1,
xlab = "Distance from Turbine",
ylab = "P(carcass falls within x meters from turbine)", ...)
source(.paths[5], echo=TRUE, max.deparse.length=150)
for (fi in aic_proper$model[nrow(aic_proper):1])
lines(xseq, pdd(xseq, dd[fi]), lty = lty[fi], col = mod_color[fi])
fi
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
xseq
model<-dd[fi]
model
x<-xseq
x
class(model)
names(model)
parms <- matrix(c(model$beta, model$parms), nrow = 1,
dimnames = list(NULL, c(names(model$beta), names(model$parms))))
source(.paths[5], echo=TRUE, max.deparse.length=150)
distr
distr<-model$distr
distr
parms
x
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
plot(ddw, type = "CDF", extent = "full")
source('C:/Users/DDALTH~1/AppData/Local/Temp/1/Tinn-R/info.R')
startSocketServer(port=8889)
x<-1:10
parms<-rbind(c(1,7), c(1.2, 12))
colnames(parms)<-c("shape", "scale")
?outer
outer(x, parms, FUN = function(x, parms) pgamma(x, shape = parms[, "shape"], scale = parms[,"scale"])
)
parms
parms<-list()
parms[[1]]<-c(shape = 1, scale = 6)
parms[[2]]<-c(shape = 1, scale = 12)
parms
outer(x, parms, FUN = function(x, parms) pgamma(x, shape = parms[, "shape"], scale = parms[,"scale"]))
outer(x, parms, FUN = function(x, parms) pgamma(x, shape = parms["shape"], scale = parms["scale"]))
outer(x, parms, FUN = function(x, parms) pgamma(x, shape = parms[[]]["shape"], scale = parms[[]]["scale"]))
parms<-rbind(c(1,7), c(1.2, 12))
colnames(parms)<-c("shape", "scale")
parms
outer(x, parms, FUN = function(a, b) pgamma(a, shape = b["shape"], scale = b["scale"]))
x
outer(x, parms, FUN = function(a, b) pgamma(a, shape = b[,"shape"], scale = b[,"scale"]))
distr
distr=="gamma"
distr<-"gamma"
parms[,"rate"]<-1/parms[,"scale"]
parms
parms[,"scale"]<-1/parms[,"scale"]
parms
names(parms)[2]<-"rate"
i1<-1:2
x
output <- matrix(0, nrow = length(x), ncol = nrow(parms))
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
parms
ppi
parms
colnames(parms)[2]<-"rate"
source(.paths[5], echo=TRUE, max.deparse.length=150)
plot(x, ans[,1])
xx
cbind(xx, parms[ppi,])
source(.paths[5], echo=TRUE, max.deparse.length=150)
plot(x, ans[,1])
points(x, ans[,2], col = 2)
i1
output
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
i1
output <- matrix(0, nrow = length(x), ncol = nrow(parms))
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
source(.paths[5], echo=TRUE, max.deparse.length=150)
xx <- rep(x, length(i1))
ppi <- rep(i1, each = length(x))
output[, i1] <- switch(distr,
matrix(pgamma(xx, shape = parms[ppi, "shape"], rate = parms[ppi, "rate"]), nrow = length(x))
i1<-matrix(c(shape = 1, rate = 1/.05), nrow = 1)
i1
parms<-matrix(c(1, 1/.05), nrow = 1, dimnames = list(NULL, c("shape", "rate")))
parms
x
i1<- 1
xx <- rep(x, length(i1))
ppi <- rep(i1, each = length(x))
matrix(pgamma(xx, shape = parms[ppi, "shape"], rate = parms[ppi, "rate"]), nrow = length(x))
xx
ppi
parms[ppi, "shape"]
parms[ppi, "rate"]
parms<-matrix(c(1, .05), nrow = 1, dimnames = list(NULL, c("shape", "rate")))
matrix(pgamma(xx, shape = parms[ppi, "shape"], rate = parms[ppi, "rate"]), nrow = length(x))
x<-17
parms<-parms<-rbind(c(1,7), 1/c(1.2, 12))
colnames(parms)<-c("shape", "rate")
parms
parms<-cbind(c(1,1), 1/c(1.2, 12))
parms
parms<-cbind(c(1,1), 1/c(7, 12))
parms
colnames(parms)<-c("shape", "rate")
xx <- rep(x, length(i1))
ppi <- rep(i1, each = length(x))
xx
ppi
ppi<-1:2
matrix(pgamma(xx, shape = parms[ppi, "shape"], rate = parms[ppi, "rate"]), nrow = length(x))
plogC
args(rmat0
args(rmat)
require(dwp)
args(rmat)
source(.paths[5], echo=TRUE, max.deparse.length=150)
args(off)
nsim<-10
x<-1:5 * 10
x
x<-1:5 * 20
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
args(prepRing)
names(wsc)
source(.paths[5], echo=TRUE, max.deparse.length=150)
siteLayout
source(.paths[5], echo=TRUE, max.deparse.length=150)
ddw <- ddFit (wsc, scVar = "svar")
names(wsc)
ddw <- ddFit (wsc, scVar = "scVar")
ddwo <- ddFit(wosc)
pdd
x
model <- ddw["gamma"]
model
pdd(x, model)
plot(pdd(x, ddw[2]))
plot(0, xlim = range(x), ylim = c(0, 1), type = "n")
nm<-"gamma"
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
for (nm in names(ddw)){
lines(x, pdd(x, ddw[nm]), col = mod_color[ddw[nm]$distr])
}
x <- 50
args(ddSim)
args(ddSim.dd)
rparm <- ddSim(ddw[nm], nsim = 100)
ddw[nm]
ddw[nm]$coeff
ddw[nm]$varbeta
bmean <- x$coefficients
bvar <- x$varbeta
dd<-ddw[nm]
bmean <- dd$coefficients
bvar <- dd$varbeta
source(.paths[5], echo=TRUE, max.deparse.length=150)
beta_sim <- mvtnorm::rmvnorm(nsim, mean = bmean, sigma = bvar, method = "svd")
distr <- dd$distr
attr(beta_sim, "distr") <- distr
ans <- cbind(beta_sim, cof2parms(beta_sim, distr), proper =
ifelse(distr %in% c("exponential", "tnormal"), 1, 2) * cofOK(beta_sim, distr))
ans
rparm <- ddSim(ddw[nm], nsim = 100)
nsim = 100
bmean <- dd$coefficients
bvar <- dd$varbeta
beta_sim <- mvtnorm::rmvnorm(nsim, mean = bmean, sigma = bvar, method = "svd")
source(.paths[5], echo=TRUE, max.deparse.length=150)
rparm <- ddSim(ddw[nm], nsim = 100)
pdd(x, rparm)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
rparms
rparm
rparm
model<-rparm
distr <- attr(model, which = "distr")
distr
source(.paths[5], echo=TRUE, max.deparse.length=150)
parms <- model
output <- matrix(0, nrow = length(x), ncol = nrow(parms))
i0 <- which(parms[, "proper"] == 0)
i1 <- which(parms[, "proper"] > 0)
i0
i1
xx <- rep(x, length(i1))
ppi <- rep(i1, each = length(x))
ppi
const <- numeric(length(i1))
tmp <- matrix(0, nrow = length(x), ncol = length(i1))
source(.paths[5], echo=TRUE, max.deparse.length=150)
i
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
model<-ddSim(ddw["gamma"], 1000
)
pdd(1:100, model)
pdd(1:100, model)
require(microbenchmark)
microbenchmark(pdd(ddw["gamma"], 100), pdd(ddw["gamma"], nsim = 100, extent = "win"))
microbenchmark(pdd(1:100, ddw["gamma"]), pdd(1:100, ddw["gamma"], extent = "win"))
microbenchmark(pdd(1:100, ddSim(ddw["gamma"], 100)), pdd(1:100, ddSim(ddw["gamma"], 100), extent = "win"))
ans<-pdd(1:100, ddSim(ddw["gamma"], 100))
ans
ans<-pdd(1:100, ddSim(ddw["gamma"], 10))
ans
plot(0, xlim = c(1,100), ylim = c(0,1),type ="l")
for (i in 1:100) lines(1:100, ans[,i])
ans<-pdd(1:100, ddSim(ddw["gamma"], 10), extent = "win")
ans
model<-ddSim(ddw["gamma"], 10))
model<-ddSim(ddw["gamma"], 10)
model
parms <- model[, cof_name[[distr]]]
srad <- attr(model, "srad")
parms
model
model[, cof_name[[distr]]]
cof_name[[distr]]
model<-ddSim(ddw["logCubic"], 10)
model
distr
model<-ddSim(ddw["logCubic"], 10)
model
parms <- model[, cof_name[[distr]]]
parms
srad <- attr(model, "srad")
output <- matrix(0, nrow = length(x), ncol = nrow(parms))
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
parms
nrow(parms)
i
i<-1
deno <- integrate(f = function(r)
exp(rmat(r, distr) %*% parms[i, cof_name[[distr]]] + off(r, distr)),
lower = 0,
upper = srad
)$val
deno
x
source(.paths[5], echo=TRUE, max.deparse.length=150)
i
output
parms
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
output <- matrix(0, nrow = length(x), ncol = nrow(parms))
i<-1
deno <- integrate(f = function(r)
exp(rmat(r, distr) %*% parms[i, cof_name[[distr]]] + off(r, distr)),
lower = 0,
upper = srad
)$val
deno
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
i<-2
deno <- integrate(f = function(r)
exp(rmat(r, distr) %*% parms[i, cof_name[[distr]]] + off(r, distr)),
lower = 0,
upper = srad
)$val
deon
deno
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
source(.paths[5], echo=TRUE, max.deparse.length=150)
output
source(.paths[5], echo=TRUE, max.deparse.length=150)
source(.paths[5], echo=TRUE, max.deparse.length=150)
args(pdd)
source(.paths[5], echo=TRUE, max.deparse.length=150)
mod_names[7]
mod_names[7]
mod_name[7]
parms
parms<-ddSim(ddw["paranormal_gamma"], 10)
distr<-"paranormal_gamma"
srad
source(.paths[5], echo=TRUE, max.deparse.length=150)
x
source(.paths[5], echo=TRUE, max.deparse.length=150)
parms<-ddSim(ddw["paranormal_gamma"], 10000)
source(.paths[5], echo=TRUE, max.deparse.length=150)
i
parms[i,]
parms[220:224,]
r<-seq(.001, 150, length = 1000)
source(.paths[5], echo=TRUE, max.deparse.length=150)
r<-seq(.001, 10, length = 1000)
source(.paths[5], echo=TRUE, max.deparse.length=150)
r<-seq(.001, 3, length = 1000)
source(.paths[5], echo=TRUE, max.deparse.length=150)
which(parms[,"log(r)"]< -1)
which(parms[,"log(r)"]< -2)
parms[, 1]
parms[1,]
source(.paths[5], echo=TRUE, max.deparse.length=150)
deno
deno<-numeric(1000)
source(.paths[5], echo=TRUE, max.deparse.length=150)
for (i in 1:1000) deno[i]<-tryCatch(integrate(f = function(r)
          exp(rmat(r, distr) %*% parms[i, cof_name[[distr]]] + off(r, distr)),
          lower = 0,
          upper = srad
        )$val,
        error = function(e) Inf
      )
deno
parms[!is.finite(deno),]
sum(!is.finite(deno))
parms[which(!is.finite(deno)),]
plot(parms[1:1000,"log(r)"], pch = ".", col = 1 + !is.finite(deno))
plot(parms[1:1000,"log(r)"],  col = 1 + !is.finite(deno))
parms<-parms[1:1000,]
parms<-cbind(parms, deno)
parms[parms[,2]< 2.5,]
parms[parms[,2]< -2.5,]
bigneg<-parms[parms[,2]< -2.5,]
bigneg[order(bigneg[,"log(r)"]),]
x
xx
r
r
r<-seq(.001, 100, len = 200)
distr
set.seed(42)
